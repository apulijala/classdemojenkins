pipeline {

    agent {
        label  'east'
    }

    options {

        disableConcurrentBuilds()

    }

    parameters {
        string( name : "hostname", defaultValue: "demo-dev", description : "Hostname"   )
        booleanParam(name :"yesno", defaultValue: false, description : "Checkbox" )
        text(name : "story", defaultValue :"Default value of the story", 
                description : "Default value of the Story")
        password(name : "secret", 
                defaultValue :"password", 
                description: "Enter the password")
        file(description : "Choose file to upload ", name : "myfile")
        choice(name: 'planet', choices: ['Mercury', 'Venus', 'Mars'], description: 'Choose Planet')

    }

    stages {

        stage("Compile") {
            agent {
                docker ({
                    image 'python:3'
                    label  'east'
                })
            }
            steps {

                echo "Running the compile phase ${params.hostname}"
                script {
                    if (yesno) {
                        sh 'python3 -m compileall adder.py' 
                    }else {
                        echo "Compilation not required"
                    }

                    timeout(time: 30, unit: 'SECONDS') {
                        input message : "Enter the timeout", 
                            parameters : [
                                string(defaultValue : "user1", 
                                    description: "Enter UserId", name : "User id")
                            ]
                    }

                    /*
                     Cannot sleep for 5 minutes. 
                        sleep( time : 5 , unit : "MINUTES") {
                            echo "Hello World and Jaya guru Datta"
                        }
                    */

                    /*
                    Which label should be used. is the on the resource. 
                    lock (label : "east", quantity: 1) {
                        sleep 5
                    }
                    */


                   
                 }
            }
                
        }

        stage("Deploly") {
                steps {
                    echo "deploying to the environment"
                }
        
        }

        stage ("Parallel Demo") {
            script {
                def stepsToRun = [:]
                for (int i = 0; i < 5; i++ ) {
                    stepsToRun ["Step_${i}"] = {
                        node {
                            echo "start"
                            sleep 5
                            echo "done"
                        }
                    }
                }

            }
        }
    }
}

